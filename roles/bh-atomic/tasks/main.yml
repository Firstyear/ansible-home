
- name: Deploy grub serial console changes
  become: yes
  action: template src=libvirt/etc/default/grub dest=/etc/default/grub owner=root group=root mode=644
  notify:
    - rebuild grub2
  when: "ansible_virtualization_role == 'guest' and 'linode_servers' not in group_names"

### ADD rdiff-backup

## rpm-ostree initramfs --enable

#- name: Install server atomic software
#  become: yes
#  command: rpm-ostree install amanda-client nmap vim zsh
#  when: "ansible_virtualization_role == 'guest' and 'linode_servers' not in group_names"

# rpm-ostree install libselinux-python policycoreutils-python amanda-client
# openldap-clients yubico-piv-tool
# opensc rpm-build zsh
# git vim vim-nerdtree rpm-fusion (with local repo)

### evolution shotwell dconf-editor gnome-tweak-tool 

# Maybe opensc?

# Remove rhgb from /etc/default/grub

# LayeredPackages: amanda-client b43-fw coolkey createrepo dconf-editor evolution git gnome-tweak-tool libselinux-python openldap-clients opensc policycoreutils-python rpm-build rpmfusion-free-release rpmfusion-nonfree-release shotwell vim vim-nerdtree yubico-piv-tool zsh python3-docker

- name: sysctl for atomic hosts
  template: src=sysctl/{{ item }} dest=/etc/sysctl.d/{{ item }} owner=root group=root mode=0644
  become: yes
  with_items:
    - 01-uofa.conf

- name: sysctl for atomic servers
  template: src=sysctl/{{ item }} dest=/etc/sysctl.d/{{ item }} owner=root group=root mode=0644
  become: yes
  with_items:
    - 02-atomic.conf
  when: "ansible_virtualization_role == 'guest' and 'linode_servers' not in group_names"

- name: static network for atomic hosts
  template: src=scripts/{{ item }} dest=/root/{{ item }} owner=root group=root mode=0750
  become: yes
  with_items:
    - network.sh
  notify:
    - run network.sh
  when: "ansible_virtualization_role == 'guest' and 'linode_servers' not in group_names"

- name: Configure secure LDAP configurations
  become: yes
  template: src=../../templates/auth/{{ item }} dest=/etc/{{ item }} owner=root group=root mode=0600
  with_items:
    - sssd/sssd.conf
    - sudoers.d/bh_admins-sudo

- name: Touch preauth avail
  become: yes
  file: state=touch mode=0644 path=/var/lib/sss/pubconf/pam_preauth_available

- name: Configure AUTH configurations
  become: yes
  template: src=../../templates/auth/{{ item }} dest=/etc/{{ item }} owner=root group=root mode=0644
  with_items:
    - pki/tls/certs/bh_ldap.crt
    - hostname
    - pam.d/password-auth-ac
    - pam.d/system-auth-ac
    - ssh/sshd_config
    - openldap/ldap.conf

# DO NOT include nsswitch here ....

- name: deploy docker configurations
  become: yes
  action: template src=docker/{{ item }} dest=/etc/sysconfig/{{ item }} owner=root group=root mode=0644
  with_items:
    - docker
    - docker-storage-setup
  when: "ansible_virtualization_role == 'guest' and 'linode_servers' not in group_names"

- name: deploy docker init script
  become: yes
  action: template src=systemd/localdocker@.service dest=/etc/systemd/system/localdocker@.service owner=root group=root mode=0644
  when: "ansible_virtualization_role == 'guest' and 'linode_servers' not in group_names"

- name: Ensure services disabled
  become: yes
  service: name=nfs-client.target enabled=no

- name: Ensure services running
  become: yes
  service: name={{ item }} enabled=yes state=started
  with_items:
    - sssd
    - sshd
    - docker
    - crond
    # This is only on laptop ....
    # - pcscd.socket

- name: Configure default masks
  become: yes
  ignore_errors: yes
  acl: path={{ item }} etype=mask permissions=rwx state=present recursive=yes default=yes
  with_items: '{{ acl_locations }}'

- name: Configure masks
  become: yes
  ignore_errors: yes
  acl: path={{ item }} etype=mask permissions=rwx state=present recursive=yes
  with_items: '{{ acl_locations }}'

- name: Configure default acl for backups to operate
  become: yes
  ignore_errors: yes
  acl: path={{ item }} entity=backup etype=user permissions=rx state=present recursive=yes default=yes
  with_items: '{{ acl_locations }}'

- name: Configure acl for backups to operate
  become: yes
  ignore_errors: yes
  acl: path={{ item }} entity=backup etype=user permissions=rx state=present recursive=yes
  with_items: '{{ acl_locations }}'

# /usr/libexec/sssd/p11_child --pre --nssdb=/etc/pki/nssdb 
# to check certs.
# Add cert to db?
# You need coolkey installed (I think ...)

# certutil -A -d /etc/pki/nssdb -i /etc/pki/tls/certs/bh_ldap.crt -n BH_LDAP_CA -t "CT,,"

# modutil modutil -dbdir /etc/pki/nssdb -add "My PKCS#11 modules" -libfile libmypkcs11.so
# modutil -dbdir /etc/pki/nssdb -add "coolkey" -libfile /usr/lib64/libcoolkeypk11.so

# semanage permissive -a sssd_t

- name: schedule atomic upgrade
  become: yes
  cron:
    user: root
    name: automatic_atomic_upgrade
    minute: 38
    hour: 7
    weekday: "{{ patch_day }}"
    job: "rpm-ostree upgrade -r"
  when: "ansible_virtualization_role == 'guest' and 'linode_servers' not in group_names"
  # when: "'atomic_master_servers' not in group_names"

