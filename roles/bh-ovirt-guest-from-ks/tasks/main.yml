
- name: create ks path
  sudo: yes
  action: file state=directory path=/var/www/html/ks/{{ inventory_hostname }}/
  delegate_to: "{{ groups.deployment_servers[0] }}"
  #with_items: groups.deployment_servers
  #ignore_errors: yes

- name: config template kickstart
  sudo: yes
  action: template src=ks.conf dest=/var/www/html/ks/{{ inventory_hostname }}/ks.conf
  delegate_to: "{{ groups.deployment_servers[0] }}"
  #with_items: groups.deployment_servers
  #ignore_errors: yes

- name: config tftp menu
  sudo: yes
  action: template src=default dest=/var/lib/tftpboot/pxelinux.cfg/default
  delegate_to: "{{ groups.deployment_servers[0] }}"
  #with_items: groups.deployment_servers
  #ignore_errors: yes

- name: Ensure VM exists
  local_action: ovirt
    state=present
    instance_name={{ inventory_hostname }}
    user={{ ovirt_admin_username }}
    password="{{ ovirt_admin_password }}"
    url={{ ovirt_engine }}
    resource_type=template
    instance_type=server
    image=blank_pxe
    region={{ ovirt_dc }}
    zone={{ ovirt_cluster }}
    sdomain={{ ovirt_sdomain }}
    #poll_timeout=3600
    #wait_for_state=down
    #gather_facts=true
    #register: ovirt_guest_data


#- name: config tftp menu
#  sudo: yes
#  action: template src=default dest=/var/lib/tftpboot/pxelinux.cfg/01-{{ item.machyphen }}
#  delegate_to: "{{ groups.deployment_servers[0] }}"
#  with_items: ovirt_guest_data.instance_data['ovirt_guest_nics']

# This will PXE boot, build and STOP the instance
#- name: ovirt launch instance
#  local_action: ovirt
#    state=started
#    instance_name={{ inventory_hostname }}
#    user={{ ovirt_admin_username }}
#    password="{{ ovirt_admin_password }}"
#    url={{ ovirt_engine }}
#    wait_for_state=down
#    poll_timeout=14400


#- name: remove template kickstart
#  sudo: yes
#  action: file path=/var/www/html/ks/{{ inventory_hostname }}/ks.conf state=absent
#  delegate_to: "{{ item }}"
#  with_items: groups.deployment_servers

