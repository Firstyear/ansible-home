
For the ldap auth you need:

/etc/origin/master/master-config.yaml

oauthConfig:
  assetPublicURL: https://osmaster.dev.blackhats.net.au:8443/console/
  grantConfig:
    method: auto
  #identityProviders:
  #- challenge: true
  #  login: true
  #  mappingMethod: claim
  #  name: allow_all
  #  provider:
  #    apiVersion: v1
  #    kind: AllowAllPasswordIdentityProvider
  identityProviders:
  - challenge: true
    login: true
    mappingMethod: claim
    name: bh_ldap
    provider:
     apiVersion: v1
     kind: LDAPPasswordIdentityProvider
     attributes:
      id:
      - dn
      email:
      - mail
      name:
      - cn
      preferredUsername:
      - uid
     ca: /etc/pki/tls/certs/bh_ldap.crt
     insecure: false
     url: "ldap://ldap01.blackhats.net.au/ou=People,dc=blackhats,dc=net,dc=au?uid?sub?(memberOf=cn=bh_admins,ou=Groups,dc=blackhats,dc=net,dc=au)"
  masterCA: ca-bundle.crt
  masterPublicURL: https://osmaster.dev.blackhats.net.au:8443
  masterURL: https://osmaster.dev.blackhats.net.au:8443
  sessionConfig:
    sessionMaxAgeSeconds: 3600
    sessionName: ssn
    sessionSecretsFile: /etc/origin/master/session-secrets.yaml
  tokenConfig:
    accessTokenMaxAgeSeconds: 86400
    authorizeTokenMaxAgeSeconds: 500


You will need to update ip6tables too:

-A INPUT -p tcp -m state --state NEW -m tcp --dport 10080 -s 2001:44b8:2155:2c11:5054:ff:feba:574 -j ACCEPT


Reboot the nodes at this point.

If you see the registry and router fail to deploy, run:

oc deploy --cancel dc/router -n default
oc latest --cancel dc/router -n default


corsAllowedOrigins:
  - 127.0.0.1
  - localhost
  - 172.24.11.19
  - kubernetes.default
  - kubernetes.default.svc.cluster.local
  - kubernetes
  - openshift.default
  - osmaster.dev.blackhats.net.au
  - openshift
  - openshift.default.svc
  - 172.30.0.1
  - openshift.default.svc.cluster.local
  - kubernetes.default.svc
  - openshift.dev.blackhats.net.au      <<-- add this

Create persistent storage next:

Make iscsi volume on the storage server

targetcli /backstores/fileio create os-dev-t1-pv-1 `pwd`/os-dev-t1-pv-1 10G write_back=false
targetcli /iscsi/iqn.2003-01.org.linux-iscsi.mion.x8664:sn.96c325adf995/tpg1/luns/ create /backstores/fileio/os-dev-t1-pv-1

On osmaster:

iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.mion.x8664:sn.96c325adf995 -l

for i in {b,c,d,e,f,g,h,i,j,k}; do mkfs.xfs /dev/sd$i; done

iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.mion.x8664:sn.96c325adf995 --logout

Now import the volumes with:

apiVersion: v1
kind: PersistentVolume
metadata:
  name: os-dev-t1-pv-XXX
spec:
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteOnce
  iscsi:
     targetPortal: 172.24.10.8
     iqn: iqn.2003-01.org.linux-iscsi.mion.x8664:sn.96c325adf995
     lun: XXX
     fsType: 'xfs'
     readOnly: false



Make the registry use a persistent volume.

Create a backing store of sufficent capacity.

targetcli /backstores/fileio create os-dev-t2-pv-11 `pwd`/os-dev-t2-pv-11 80G write_back=false
targetcli /iscsi/iqn.2003-01.org.linux-iscsi.mion.x8664:sn.96c325adf995/tpg1/luns/ create /backstores/fileio/os-dev-t2-pv-11

iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.mion.x8664:sn.96c325adf995 -l
mkfs.xfs /dev/sdXXXX
iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.mion.x8664:sn.96c325adf995 --logout

Now make the volume

apiVersion: v1
kind: PersistentVolume
metadata:
  name: os-dev-t2-pv-11
spec:
  capacity:
    storage: 78Gi
  accessModes:
    - ReadWriteOnce
  iscsi:
     targetPortal: 172.24.10.8
     iqn: iqn.2003-01.org.linux-iscsi.mion.x8664:sn.96c325adf995
     lun: 0
     fsType: 'xfs'
     readOnly: false

Create a claim for it



apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  name: "claim-os-dev-t2-pv-11"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "78Gi"
  volumeName: "os-dev-t2-pv-11"


Now attach this to the registry for usage.

oc volume deploymentconfigs/docker-registry --add --name=registry-storage -t pvc --claim-name=claim-os-dev-t2-pv-11 --overwrite



Can push images with:

sudo docker login -u william -p `oc whoami -t` docker-registry-default.openshift.dev.blackhats.net.au:80
sudo docker tag centos_wibrown_devel:7 docker-registry-default.openshift.dev.blackhats.net.au:80/centos7sh/centos_wibrown_devel
sudo docker push docker-registry-default.openshift.dev.blackhats.net.au:80/centos7sh/centos_wibrown_devel

oc run -i --tty zsh --image=centos_wibrown_devel --restart=Never

##### Change a default SCC for a project!!!!

# Allows run as root!
# You can always copy the SCC to change the user run as etc
oadm policy add-scc-to-user anyuid -z default




### Running container as root:

You need to use the anyuid or privileged policy:

if you specify the in the dockefile "USER root" it will IGNORE you and just map to some crazy uid anyway.

[root@osmaster]/home/william# oadm policy add-scc-to-user privileged system:serviceaccount:centos7ssh:default
[root@osmaster]/home/william# oadm policy add-scc-to-user anyuid system:serviceaccount:centos7ssh:default
[root@osmaster]/home/william# oc policy add-role-to-user admin william -n centos7ssh


### How do you make the load balancer use your own domain name.




