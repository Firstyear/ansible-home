# Global settings
# increase default state limit from 10'000 states on busy systems
set limit states 50000
set block-policy drop

# Application and internetwork rules.
# There are really five things we need to check inbound for
# - network mgmt devices
# - Locked down nets
# - untrusted
# - Semi-trusted
# - fully trusted

# No internet, can access radiusd / unifi
table <network_mgmt> const {
    172.24.10.0/24, 2001:44b8:2155:2c10::/64, \
    172.24.16.0/24, 2001:44b8:2155:2c16::/64 \
}

# No internet, no other access.
table <network_locked> const {
    172.24.18.0/24, 2001:44b8:2155:2c18::/64, \
    172.24.23.0/24, 2001:44b8:2155:2c23::/64, \
    172.24.24.0/24, 2001:44b8:2155:2c24::/64 \
}

table <network_apps> const {
    172.24.11.0/24, 2001:44b8:2155:2c11::/64 \
}

# Can access some services (dns, ldap, smb)
table <network_untrusted> const {
    172.24.11.0/24, 2001:44b8:2155:2c11::/64, \
    172.24.14.0/24, 2001:44b8:2155:2c14::/64, \
    172.24.15.0/24, 2001:44b8:2155:2c15::/64, \
    172.24.16.0/24, 2001:44b8:2155:2c16::/64, \
    172.24.251.0/24, 2001:44b8:2155:2c41::/64 \
}

# Similar to above, but with ssh.
# Include most VPN end points.
table <network_semitrust> const {
    172.24.13.0/24, 2001:44b8:2155:2c13::/64, \
    172.20.0.0/16, 172.22.0.0/16 \
}

# Can access everything.
table <network_privileged> const {
    172.24.12.0/24, 2001:44b8:2155:2c12::/64, \
    172.24.17.0/24, 2001:44b8:2155:2c17::/64, \
    172.24.200.0/24, 2001:44b8:2155:2cd0::/60 \
}

table <network_external_all> const {
    !127.0.0.1/8, !::1/128, \
    !fe80::/64, !2001:44b8:2155:2c00::/56, \
    !172.24.0.0/16, 0.0.0.0/0, ::/0 \
}


# All internal interfaces
interface_int_r0="{lo0, re0, re1, re2, re3, re4, re5, re6, re7, re8, tun1, tun2, tun3 }"

# And these are their destination applications.
# - radiusd
# - ldap
# - snmp
# - openvpn
# - samba
# - unifi
# - ...

dc_tcp_ports="{53, 389, 636}"
dc_udp_ports="{53}"
dc_servers="{2400:8901::f03c:91ff:fee4:8e71, 139.162.14.225, 2001:44b8:2155:2c16::15, 172.24.16.15, 2a01:7e00::f03c:91ff:fe84:9e3e, 176.58.108.205, 2400:8901::f03c:91ff:fe98:4593, 139.162.11.163, 172.24.11.12, 2001:44b8:2155:2c11:5054:ff:fe0c:110e }"
dc_servers6="{2400:8901::f03c:91ff:fee4:8e71, 2001:44b8:2155:2c16::15, 2a01:7e00::f03c:91ff:fe84:9e3e, 2400:8901::f03c:91ff:fe98:4593, 2001:44b8:2155:2c11:5054:ff:fe0c:110e }"



radiusd_ports="{ 1812:1814 }"
radiusd_hosts="{ 172.24.16.15, 2001:44b8:2155:2c16::15 }"

martians = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, 0.0.0.0/8, 240.0.0.0/4 }"
# What are the non-routable ipv6 ranges? I think it's only
# We want to block our own ipv6 prefix here to prevent leaking ...?
martians6 = "{ 2001:db8::/32, 2001:44b8:2155:2c00::/56 }"

icmp_types = "{echorep, echoreq, trace}"
icmp6_types = "{echoreq, echorep}"
# For fe80, but may as well allow all LL instead.
# icmp6_ll_types = "{echoreq, echorep, routersol, routeradv, neighbrsol, neighbradv}"

ext_if = tun0

scrub in on $interface_int_r0 fragment reassemble no-df
scrub in on $ext_if no-df
scrub out on $ext_if max-mss 1460
## NAT ##
nat on $ext_if from 172.24.0.0/16 to any -> ($ext_if)

# We may not be able to set antispoof if we allow rtable leaking
antispoof quick for $interface_int_r0
antispoof quick for $ext_if

# Default block rules
block in log quick from urpf-failed
block in log all

pass out all keep state

pass in on $ext_if inet proto icmp from any to any icmp-type $icmp_types keep state
pass in on $ext_if inet6 proto icmp6 from any to any icmp6-type $icmp6_types keep state
pass in on $ext_if inet6 proto icmp6 from {ff02::/64, fe80::/64} to {ff02::/64, fe80::/64} keep state
# Allow dhcp6 to work.
pass in on $ext_if inet6 proto udp from fe80::/64 port 547 to fe80::/64 port 546 keep state

pass in on $interface_int_r0 proto icmp from any to any keep state
pass in on $interface_int_r0 proto icmp6 from any to any keep state

### Allow internet access
pass in inet6 from <network_untrusted> to <network_external_all> keep state
pass in inet from <network_untrusted> to <network_external_all> keep state
pass in inet6 from <network_semitrust> to <network_external_all> keep state
pass in inet from <network_semitrust> to <network_external_all> keep state
pass in inet6 from <network_privileged> to <network_external_all> keep state
pass in inet from <network_privileged> to <network_external_all> keep state

## Prevent internal traffic leaking to the internet
block in log quick on $ext_if from $martians to any
block out log quick on $ext_if from any to $martians
## Same for ipv6
block in log quick on $ext_if from $martians6 to any
block out log quick on $ext_if from any to $martians6

## SSH
pass in on $ext_if proto tcp from any to ($ext_if:0) port 22
pass in proto tcp from <network_privileged> to any port ssh keep state

## Allow vpn
pass in on $ext_if proto udp from any to ($ext_if:0) port {1195, 1196, 1197}

## Allow most networks to NTP to internode.
pass in proto {tcp,udp} from <network_mgmt> to {192.231.203.132, 2001:44b8:1::1} port ntp keep state
pass in proto {tcp,udp} from <network_untrusted> to {192.231.203.132, 2001:44b8:1::1} port {ntp, domain} keep state
pass in proto {tcp,udp} from <network_semitrust> to {192.231.203.132, 2001:44b8:1::1} port ntp keep state
pass in proto {tcp,udp} from <network_privileged> to {192.231.203.132, 2001:44b8:1::1} port ntp keep state

## Allow internal machines to DNS out.

pass in proto {tcp,udp} from $dc_servers to <network_external_all> port 53 keep state

## LDAP/DNS lookups
pass in proto tcp from <network_mgmt> to $dc_servers port $dc_tcp_ports keep state
pass in proto tcp from <network_untrusted> to $dc_servers port $dc_tcp_ports keep state
pass in proto tcp from <network_semitrust> to $dc_servers port $dc_tcp_ports keep state
pass in proto tcp from <network_privileged> to $dc_servers port $dc_tcp_ports keep state

pass in proto udp from <network_mgmt> to $dc_servers port $dc_udp_ports keep state
pass in proto udp from <network_untrusted> to $dc_servers port $dc_udp_ports keep state
pass in proto udp from <network_semitrust> to $dc_servers port $dc_udp_ports keep state
pass in proto udp from <network_privileged> to $dc_servers port $dc_udp_ports keep state

# Allow replication and axfr
pass in proto tcp from $dc_servers6 to $dc_servers6 port $dc_tcp_ports keep state
pass in proto udp from $dc_servers6 to $dc_servers6 port $dc_udp_ports keep state

## RADIUSD
pass in proto {tcp, udp} from <network_mgmt> to $radiusd_hosts port $radiusd_ports keep state

## Access locked down nets.
pass in from <network_privileged> to <network_locked> keep state

## Access management networks
pass in from <network_privileged> to <network_mgmt> keep state

## Allow access to public application servers.
pass in from <network_mgmt> to <network_apps> keep state
pass in from <network_semitrust> to <network_apps> keep state
pass in from <network_privileged> to <network_apps> keep state

## Allow netbooting
# this rule could be better? Or move the netboot mirror ...
pass in proto tcp from {172.24.11.0/24, 2001:44b8:2155:2c11::/64} to <network_mgmt> port {http, https} keep state

## Allow docker registry access to some locations.
# This rule already covered by priv to mgmt
# pass in proto tcp from <network_privileged> to {2001:44b8:2155:2c10:5054:ff:fe38:ba08, 172.24.10.18} port 443 keep state
pass in proto tcp from <network_apps> to {2001:44b8:2155:2c10:5054:ff:fe38:ba08, 172.24.10.18} port 443 keep state
pass in proto tcp from <network_mgmt> to {2001:44b8:2155:2c10:5054:ff:fe38:ba08, 172.24.10.18} port 443 keep state


