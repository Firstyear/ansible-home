#       $OpenBSD: pf.conf,v 1.53 2014/01/25 10:28:36 dtucker Exp $
#
# See pf.conf(5) for syntax and examples.
# Remember to set net.inet.ip.forwarding=1 and/or net.inet6.ip6.forwarding=1
# in /etc/sysctl.conf if packets are to be forwarded between interfaces.

# Global settings
# increase default state limit from 10'000 states on busy systems
set limit states 50000
set block-policy drop
#set state-policy if-bound


#### QUEUES

queue egress_up_q on pppoe0 bandwidth 300K
queue egress_up_q_default parent egress_up_q bandwidth 300K default
queue egress_up_q_limit parent egress_up_q bandwidth 100K burst 200K for 2000ms

queue vio4_dn_q on vio4 bandwidth 4M max 5M
queue vio4_dn_q_limit parent vio4_dn_q bandwidth 4M burst 5M for 2000ms default

queue vio3_dn_q on vio3 bandwidth 7M max 8M
queue vio3_dn_q_limit parent vio3_dn_q bandwidth 7M burst 8M for 2000ms default

#### MACROS

# Remove the old v4 internet access: nat64 is good enough for all now!
# Is there anything that relies on v4 only? Perhaps the RH vpn?
table <network_internet_access> const { 2001:44b8:2155:2c11::/64, 172.24.11.0/24, 172.24.12.0/24, 2001:44b8:2155:2c12::/64, 172.24.200.0/24, 2001:44b8:2155:2cc8::/64 }
#table <network_temp_internet_access> const { 172.24.10.0/24 }
table <network_temp_internet_access> const {}

table <network_internet_ratelimit> const {172.24.13.0/24, 2001:44b8:2155:2c13::/64, 172.24.14.0/24, 2001:44b8:2155:2c14::/64}

table <network_proxy_access> const{ 172.24.10.0/24, 2001:44b8:2155:2c10::/64, 172.24.11.0/24, 2001:44b8:2155:2c11::/64, 172.24.12.0/24, 2001:44b8:2155:2c12::/64, 2001:44b8:2155:2c15::/64, 172.24.16.0/24, 2001:44b8:2155:2c16::/64 }

table <network_privileged_all> const {172.24.12.0/24, 2001:44b8:2155:2c12::/64, 172.24.200.0/24, 2001:44b8:2155:2cc8::/64}

table <network_vulnerable_all> const {172.24.23.0/24, 2001:44b8:2155:2c23::/64}

table <network_internal_all_r0> const {
127.0.0.1/8, ::1/128, fe80::/64, \
172.24.10.0/24, 2001:44b8:2155:2c10::/64,\
172.24.11.0/24, 2001:44b8:2155:2c11::/64,\
172.24.12.0/24, 2001:44b8:2155:2c12::/64,\
172.24.13.0/24, 2001:44b8:2155:2c13::/64,\
172.24.16.0/24, 2001:44b8:2155:2c16::/64,\
172.24.17.0/24, 2001:44b8:2155:2c17::/64,\
172.24.200.0/24, 2001:44b8:2155:2cc8::/64\
}

table <network_developer_all> const {\
172.24.15.0/24, 2001:44b8:2155:2c15::/64\
}
table <network_external_all> const {!127.0.0.1/8, !::1/128, !fe80::/64, !2001:44b8:2155:2c00::/56, !172.24.0.0/16, 0.0.0.0/0, ::/0   }

table <network_nextyear_all> const { 172.29.0.0/20 }

table <network_deployment_ranges> const {172.24.11.0/24, 2001:44b8:2155:2c11::/64, 172.24.15.0/24, 2001:44b8:2155:2c15::/64}

interface_int_r0="{lo0, vio0, vio1, vio2, vio3, vio4, vio5, vio6, vio7, vio8, tun0, tun2 }"

interface_s2svpn_ny_r0="{tun2}"

radiusd_ports="{ 1812:1814 }"
radiusd_hosts="{ 172.24.16.15, 2001:44b8:2155:2c16::15 }"
radiusd_clients="{ 172.24.10.11, 172.24.10.12, 172.24.10.15 }"

dc_tcp_ports="{53, 389, 636}"
dc_udp_ports="{53}"
dc_servers="{172.24.16.13, 2001:44b8:2155:2c16:5054:ff:fe89:97e2, 2400:8901::f03c:91ff:fee4:8e71, 2001:44b8:2155:2c16::15, 172.24.16.15 }"
dc_servers6="{2001:44b8:2155:2c16:5054:ff:fe89:97e2, 2400:8901::f03c:91ff:fee4:8e71, 2001:44b8:2155:2c16::15 }"

amanda_tcp_ports="{10080}"
amanda_servers="{2001:44b8:2155:2c11:5054:ff:feba:574}"

snmp_tcp_ports="{161}"
snmp_servers="{2001:44b8:2155:2c11:5054:ff:feba:574}"

# deployment_hosts="{ 172.24.11.41, 2001:44b8:2155:2c11:21a:4aff:fe50:5d11 }"

# mail_tcp_ports="{25,143,465,993}"
# mail_servers="{ 2400:8901::f03c:91ff:fee4:8e71 }"

openvpn_ports="{ 1194, 1195, 1196 }"
openconnect_ports = "{443}"

smtp_ports="{ 25, 587, 465 }"
smtp_hosts="{ 2400:8901::f03c:91ff:fe98:4593, 2400:8901::f03c:91ff:fee4:8e71, 2a01:7e00::f03c:91ff:fe84:9e3e }"

samba_udp_ports="{137, 138}"
samba_tcp_ports="{139, 445}"
samba_servers="{172.24.11.28, 2001:44b8:2155:2c11:5054:ff:fe9f:207c}"

transmission6_servers="{2001:44b8:2155:2c12:6aa8:6dff:fe4f:3388}"
transmission_servers="{172.24.12.12}"
transmission_ports="{ 51413 }"

openttd_servers="{172.24.12.21 }"
openttd_ports="{3979, 3978}"

linode_servers="{2400:8901::f03c:91ff:fe98:4593, 2a01:7e00::f03c:91ff:fe84:9e3e}"

openshift_masters="{172.24.11.19, 2001:44b8:2155:2c11:5054:ff:fe7f:7112}"
openshift_applications="{172.46.0.0/16}"
openshift_client_ports="{80, 443}"
openshift_admin_ports="{8443}"

openshift_nodes="{172.24.11.19, 2001:44b8:2155:2c11:5054:ff:fe7f:7112, 172.24.11.21, 2001:44b8:2155:2c11:5054:ff:fe61:94ce, 172.24.11.23, 2001:44b8:2155:2c11:5054:ff:fe13:ab6f}"
# iscsi_servers="{172.24.10.8, 2001:44b8:2155:2c10:215:17ff:fe1c:fb43}"
# iscsi_ports="{3260}"

# martians = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, 0.0.0.0/8, 240.0.0.0/4 }"
# What are the non-routable ipv6 ranges? I think it's only
# We want to block our own ipv6 prefix here to prevent leaking ...?
# martians6 = "{ 2001:db8::/32, 2001:44b8:2155:2c00::/56 }"

icmp_types = "{echorep, echoreq, trace}"
icmp6_types = "{echoreq, echorep}"
icmp6_ll_types = "{echoreq, echorep, routersol, routeradv, neighbrsol, neighbradv}"

#### RTABLE TEMPLATE

### ANCHORS
### NAT
### NORMALISATION
#match in on $interface_all_rX scrub (no-df) rtable X
#match out on egress scrub (max-mss 1420) rtable X
#block in log on $interface_all_rX rtable X
# We may not be able to set antispoof if we allow rtable leaking
# #antispoof log quick for $interface_all_rX rtable X
#block in log quick from urpf-failed to any rtable X
#pass out quick keep state rtable X

### RULES

#### ANCHORS

# anchor "ftp-proxy/*" rtable 0
# pass in quick on $interface_int_r0 inet proto tcp to port ftp divert-to 127.0.0.1 port 8021 rtable 0
anchor "relayd/*" rtable 0

# Set up NAT
match out on egress inet from <network_internet_access> to any nat-to (egress:0) rtable 0
match out on egress inet from <network_temp_internet_access> to any nat-to (egress:0) rtable 0
match out on egress inet from <network_internet_ratelimit> to any nat-to (egress:0) rtable 0
match out on egress inet from $dc_servers to any nat-to (egress:0) rtable 0

#### ALL DOMAINS

match in on $interface_int_r0 scrub (no-df)
match in on egress scrub (no-df)
# We may not be able to set antispoof if we allow rtable leaking
antispoof quick for $interface_int_r0
antispoof quick for egress
block in log quick from urpf-failed

#### RTABLE 0

match out on egress scrub (max-mss 1460) rtable 0
block in log on egress rtable 0
block in log on $interface_int_r0 rtable 0

pass out keep state rtable 0

pass in on egress inet proto icmp from any to any icmp-type $icmp_types keep state rtable 0
pass in on egress inet6 proto icmp6 from any to any icmp6-type $icmp6_types keep state rtable 0
pass in on egress inet6 proto icmp6 from fe80::/64 to any icmp6-type $icmp6_ll_types keep state rtable 0

pass in on $interface_int_r0 proto icmp from any to any keep state rtable 0
pass in on $interface_int_r0 proto icmp6 from any to any keep state rtable 0

## Prevent internal traffic leaking to the internet
# block in log quick on egress from $martians to any rtable 0
# block out log quick on egress from any to $martians rtable 0
## Same for ipv6
# block in log quick on egress from $martians6 to any rtable 0
# block out log quick on egress from any to $martians6 rtable 0


#### RTABLE 1

# This is for the cisco lab.

#match out on egress scrub (max-mss 1460) rtable 1
# block in log on $interface_all_r1 rtable 0
#block in log on $interface_all_r1 rtable 1

#pass out keep state rtable 1

#pass in proto icmp from any to any keep state rtable 1
#pass in proto icmp6 from any to any keep state rtable 1

#### RTABLE 0

# These need to be quick, so that the other ssh related rules don't take over. This breaks nat64 otherwise.
# These is where we have to apply queuing for downloads.
pass out quick on vio4 inet6 from <network_external_all> no state rtable 0 set queue vio4_dn_q_limit
pass out quick on vio4 inet from <network_external_all> no state rtable 0 set queue vio4_dn_q_limit
pass out quick on vio3 inet6 from <network_external_all> no state rtable 0 set queue vio3_dn_q_limit
pass out quick on vio3 inet from <network_external_all> no state rtable 0 set queue vio3_dn_q_limit
# Allow all our network interfaces to connect out to the internet for ipv6
pass in inet6 from <network_internet_access> to <network_external_all> keep state rtable 0
pass in inet from <network_internet_access> to <network_external_all> keep state rtable 0
pass in inet6 from <network_temp_internet_access> to <network_external_all> keep state rtable 0
pass in inet from <network_temp_internet_access> to <network_external_all> keep state rtable 0
# Nat64, allow all internal networks to contact the world via this. Temporarily allow only web ...
pass in inet6 from <network_internet_access> to 2001:44b8:2155:2c64::/96 af-to inet from (egress:0) keep state rtable 0
pass in inet6 from <network_temp_internet_access> to 2001:44b8:2155:2c64::/96 af-to inet from (egress:0) keep state rtable 0
# pass in quick inet6 from <network_internet_ratelimit> to 2001:44b8:2155:2c64::/96 af-to inet from (egress:0) keep state rtable 0

#### Ratelimited internet networks

# Allow all our network interfaces to connect out to the internet for ipv6
pass in inet6 from <network_internet_ratelimit> to <network_external_all> keep state rtable 0 set queue egress_up_q_limit
pass in inet from <network_internet_ratelimit> to <network_external_all> keep state rtable 0 set queue egress_up_q_limit
# Nat64, allow all internal networks to contact the world via this.
# pass in on $interface_int_r0 inet6 from <network_internet_ratelimit> to 2001:44b8:2155:2c64::/96 af-to inet from (egress:0) keep state rtable 0 set queue egress_up_q_limit
# Allow DHCP6 to lease from internode.
pass in on egress inet6 proto udp from fe80::/64 port 547 to fe80::/64 port 546 keep state rtable 0

# Allow BGP : Remember, you need both v4 and v6 to transmit each route
# Bgp to amelea
pass in on vio7 proto tcp from 172.24.17.2 to 172.24.17.1 port bgp keep state rtable 0
pass in on vio7 proto tcp from 2001:44b8:2155:2c17::2 to 2001:44b8:2155:2c17::1 port bgp keep state rtable 0

# Bgp to mikoto
pass in on tun2 proto tcp from 172.29.240.2 to 172.29.240.1 port bgp keep state rtable 0
pass in on tun2 proto tcp from 2001:44b8:2155:2cca::2 to 2001:44b8:2155:2cca::1 port bgp keep state rtable 0

# Allow SSH to the router from external
pass in on egress proto tcp from any to (egress:0) port 22 rtable 0

# Allow ssh anywhere inside our networks
pass in proto tcp from <network_privileged_all> to any port ssh keep state rtable 0
# Make an exemption for nextyear, who gets dynamic addrs
# pass in on $interface_int_r0 proto tcp from <network_nextyear_all_r0> to any port ssh keep state rtable 0
# This needs to be a interface rule due to nextyears dynamic ipv6 prefix
pass in on $interface_s2svpn_ny_r0 proto tcp from any to any port ssh keep state rtable 0

# Allow our internal systems to contact NTP
pass in proto {tcp,udp} from <network_internal_all_r0> to 2001:44b8:2155:2c64::c0e7:cb84 port 123 af-to inet from (egress:0) keep state rtable 0
pass in proto {tcp,udp} from <network_internal_all_r0> to {192.231.203.132, 2001:44b8:1::1} port 123 keep state rtable 0
pass in proto {tcp,udp} from <network_developer_all> to {2001:44b8:1::1} port 123 keep state rtable 0

# Allow our TRUSTED internal networks to smtp
pass in proto tcp from <network_internal_all_r0> to $smtp_hosts port $smtp_ports keep state rtable 0
pass in proto tcp from <network_developer_all> to $smtp_hosts port $smtp_ports keep state rtable 0

# Allow DNS connections out
pass in proto {tcp,udp} from $dc_servers to <network_external_all> port 53 keep state rtable 0
pass in proto {tcp,udp} from $dc_servers6 to 2001:44b8:2155:2c64::/96 port 53 af-to inet from (egress:0) keep state rtable 0

# Allow access to the domain controllers
# Better rules.
pass in proto tcp from <network_internal_all_r0> to $dc_servers port $dc_tcp_ports keep state rtable 0
pass in proto udp from <network_internal_all_r0> to $dc_servers port $dc_udp_ports keep state rtable 0

# Allow developer network some internal resources
pass in proto tcp from <network_developer_all> to $dc_servers port $dc_tcp_ports keep state rtable 0
pass in proto udp from <network_developer_all> to $dc_servers port $dc_udp_ports keep state rtable 0

pass in proto tcp from $dc_servers6 to $dc_servers6 port $dc_tcp_ports keep state rtable 0
pass in proto udp from $dc_servers6 to $dc_servers6 port $dc_udp_ports keep state rtable 0

pass in proto tcp from $linode_servers to $dc_servers6 port $dc_tcp_ports keep state rtable 0
pass in proto udp from $linode_servers to $dc_servers6 port $dc_udp_ports keep state rtable 0

#Allow certain devices access to radius
pass in proto {tcp, udp} from $radiusd_clients to $radiusd_hosts port $radiusd_ports keep state rtable 0

# Allow in for email from all hosts
# pass in proto tcp from <network_internal_all_r0> to $mail_servers port $mail_tcp_ports keep state rtable 0

#Allow AMANDA to backup all hosts
pass in proto tcp from $amanda_servers to <network_internal_all_r0> port $amanda_tcp_ports keep state rtable 0
pass in proto tcp from $amanda_servers to <network_developer_all> port $amanda_tcp_ports keep state rtable 0
# Allow amanda to access mikoto
pass in proto tcp from $amanda_servers to 2001:44b8:2155:2cca::2 port $amanda_tcp_ports keep state
# Allow amanda to backup the linodes
pass in proto tcp from $amanda_servers to $dc_servers6 port $amanda_tcp_ports keep state rtable 0
# pass in on $interface_int_r0 proto icmp6 from $amanda_servers to $dc_servers6 keep state rtable 0

# Allow snmp to monitor all hosts
pass in proto tcp from $snmp_servers to <network_internal_all_r0> port $snmp_tcp_ports keep state rtable 0
pass in proto tcp from $snmp_servers to <network_developer_all> port $snmp_tcp_ports keep state rtable 0
pass in proto tcp from $snmp_servers to $dc_servers6 port $snmp_tcp_ports keep state rtable 0

#pass in on $interface_int_r0 proto icmp6 from $snmp_servers to $dc_servers6 keep state rtable 0

# Allow deployment and network booting to function.
# pass in proto tcp from <network_deployment_ranges> to $deployment_hosts port http keep state rtable 0
# pass in proto tcp from <network_privileged_all> to $deployment_hosts port http keep state rtable 0
# Allow xbmc control
# Probably should move xbmc to vlan 13 ....
# pass in proto tcp from <network_privileged_all> to 172.24.13.0/24 port { 8080, 9090 } keep state rtable 0

# Allow samba
pass in proto udp from <network_internal_all_r0> to $samba_servers port $samba_udp_ports keep state rtable 0
pass in proto tcp from <network_internal_all_r0> to $samba_servers port $samba_tcp_ports keep state rtable 0
# Allow samba over the vpn
pass in on $interface_s2svpn_ny_r0 proto udp from any to $samba_servers port $samba_udp_ports keep state rtable 0
pass in on $interface_s2svpn_ny_r0 proto tcp from any to $samba_servers port $samba_tcp_ports keep state rtable 0

# Allow some access to dev networks
pass in proto tcp from <network_privileged_all> to <network_developer_all> port {80, 443, 8080, 8443} keep state rtable 0
# Fucking just move victoria
pass in proto tcp from <network_privileged_all> to <network_privileged_all> port {80, 443, 8080, 8443} keep state rtable 0

# Allow openvpn in
pass in proto udp from any to (egress:0) port $openvpn_ports keep state rtable 0

# Allow openconnect
pass in proto {tcp,udp} from any to (egress:0) port $openconnect_ports keep state rtable 0

# Allow openttd: Move this to relayd .... 
#pass in on egress proto {tcp, udp} from any to any port $openttd_ports rdr-to $openttd_servers keep state rtable 0
#pass in on egress proto {tcp, udp} from any to (egress:0) port $openttd_ports keep state rtable 0


# Sometimes torrents
pass in on egress proto {tcp, udp} from any to any port $transmission_ports rdr-to $transmission_servers keep state rtable 0
pass in on egress proto {tcp, udp} from any to (egress:0) port $transmission_ports keep state rtable 0
pass in proto udp from any to $transmission6_servers port $transmission_ports keep state rtable 0 

# Openshift
pass in proto tcp from <network_privileged_all> to $openshift_masters port $openshift_admin_ports keep state rtable 0
pass in proto tcp from <network_internal_all_r0> to $openshift_masters port $openshift_client_ports keep state rtable 0
# Allow priv networks to access all openshift applications deployed with ip allocations
pass in from <network_privileged_all> to $openshift_applications keep state rtable 0

# Allow openshift to iscsi to the iscsi servers
# pass in proto {tcp, udp} from $openshift_nodes to $iscsi_servers port $iscsi_ports keep state rtable 0

# Allow all to the vulnerable network
pass in from <network_privilged_all> to <network_vulnerable_all> keep state rtable 0
pass in from { 172.24.13.0/24, 2001:44b8:2155:2c23::/64} to <network_vulnerable_all> keep state rtable 0

## ILO
# pass in on $interface_int_r0 proto tcp from 172.24.12.0/24 to 172.24.11.0/24 port {80, 443} keep state rtable 0

####### RELAYD ALLOWS #########

relayd_servers = "{ 2001:44b8:2155:2c11::1, 172.24.11.1 }"
proxy_ports="{ 3128 }"
unifi_ports="{ 8443 }"
dns_ports="{ 53 }"
ldap_ports="{ 389, 636 }"

# This allows port 22222 which coordinates with relayd.
pass in on egress proto tcp from any to (egress:0) port 22222 keep state rtable 0

# Allow unifi access
pass in proto tcp from <network_privileged_all> to $relayd_servers port $unifi_ports keep state rtable 0

# Allow proxy server access from designated networks.
#### SEE THE DEFINITIONS OF PROXY_SERVERS: This allows relayd to work!
pass in proto tcp from <network_proxy_access> to $relayd_servers port $proxy_ports keep state rtable 0

# Dns access.
pass in proto { tcp, udp } from <network_internal_all_r0> to $relayd_servers port $dns_ports keep state rtable 0
# Ldap access
pass in proto tcp from <network_internal_all_r0> to $relayd_servers port $ldap_ports keep state rtable 0

#### RTABLE 1

# This is for the cisco lab.

#pass in on $interface_int_r0 proto tcp from <network_internal_all_r0> to <network_internal_all_r1> port ssh keep state rtable 0
# pass in on $interface_all_r1 proto tcp from <network_internal_all_r1> to <network_internal_all_r1> port ssh keep state rtable 0
# pass in on $interface_all_r1 proto icmp from <network_internal_all_r1> to <network_internal_all_r1> keep state rtable 0
# pass in on $interface_all_r1 inet6 proto icmp6 from <network_internal_all_r1> to <network_internal_all_r1> keep state rtable 0


